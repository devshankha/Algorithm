package Huffman;

import java.util.Comparator;
import java.util.Iterator;
import java.util.PriorityQueue;
import java.util.TreeSet;

class HuffmanNode {
	int data;
	char c;
	HuffmanNode left;
	HuffmanNode right;
	@Override
	public String toString() {
		return "[data=" + data + ", c=" + c + "]";
	}
	

}

class MyComparator implements Comparator<HuffmanNode> {
	public int compare(HuffmanNode x, HuffmanNode y) {

		return x.data - y.data;
	}
}

public class Huffman {
	 public static void printCode(HuffmanNode root, String s)
     {
  
         // base case; if the left and right are null
         // then its a leaf node and we print
         // the code s generated by traversing the tree.
         if (root.left
                 == null
             && root.right
                    == null
             && Character.isLetter(root.c)) {
  
             // c is the character in the node
             System.out.println(root.c + ":" + s);
  
             return;
         }
  
         // if we go to left then add "0" to the code.
         // if we go to the right add"1" to the code.
  
         // recursive calls for left and
         // right sub-tree of the generated tree.
         printCode(root.left, s + "0");
         printCode(root.right, s + "1");
     }
	public static void main(String[] args) {
		int n = 4;
        char[] charArray = { 'a', 'b', 'c', 'd' };
        int[] charfreq = { 9,3,11,2 }; 
        PriorityQueue<HuffmanNode> q
            = new PriorityQueue<HuffmanNode>(n, new MyComparator());
        for (int i = 0; i < n; i++) {
        	 
            // creating a huffman node object
            // and adding it to the priority-queue.
            HuffmanNode hn = new HuffmanNode(); 
            hn.c = charArray[i];
            hn.data = charfreq[i]; 
            hn.left = null;
            hn.right = null; 
            // add functions adds
            // the huffman node to the queue.
            q.add(hn);
        }
        Iterator<HuffmanNode> through = q.iterator() ;
        while(through.hasNext() ) {
                System.out.print(through.next() + " ") ;
        }
        System.out.println();
       
     
        HuffmanNode root = null;
        
        // Here we will extract the two minimum value
        // from the heap each time until
        // its size reduces to 1, extract until
        // all the nodes are extracted.
        while (q.size() > 1) {
 
            // first min extract.
            HuffmanNode x = q.poll();
            //q.poll();
 
            // second min extarct.
            HuffmanNode y = q.poll();
           // q.poll();
 
            // new node f which is equal
            HuffmanNode f = new HuffmanNode();
 
            // to the sum of the frequency of the two nodes
            // assigning values to the f node.
            f.data = x.data + y.data;
            f.c = '-';
 
            // first extracted node as left child.
            f.left = x;
 
            // second extracted node as the right child.
            f.right = y;
 
            // marking the f node as the root node.
            root = f;
 
            // add this node to the priority-queue.
            q.add(f);
        }
        printCode(root, "");
 
		
	}

}
